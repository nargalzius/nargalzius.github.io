version = '1.0'
title = 'Helper Class for gmaps.js'
path = 'http://nargalzius.github.io/ajax/joystick/gmaps_helper'


!!!5
html
	head
		meta(http-equiv="Content-Type", content="text/html; charset=utf-8")
		title #{title}
		link(rel="stylesheet", type="text/css", href="../../../f/c/readme.css")

		script(type="text/javascript",src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js")
		script(type="text/javascript",src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.3/highlight.min.js")

	body
		
		header#info

			img#logo(src="../../../img/joystick/logo.png", alt="Joystick Interactive")

			:markdown

				# #{title}

				A GoogleMaps helper class for [gmaps.js](http://hpneo.github.io/gmaps) that allows quicker implementation of common requested "features" for work demos.

				It's primary purpose is as a "marker helper" - because that's a given whenever I make demos that involve using an interactive map. I decided to call it a general helper class in case more "features" are added down the road.

				It still uses the default `infoWindow` of GoogleMaps, but it provides a much easier way of plugging in and customizing the `content` variable of said `infoWindow`

				I decided to call it a general helper class in case more features are added down the road.

			h3 Resources

			ul
				li
					a(href="#usage") Getting Started
				li
					a(target="_blank", href="http://jsfiddle.net/nargalzius/B2Hdt") Sandbox
					|  (JSFiddle)
				li
					a(href="#api") Full Documentation  
				li
					a(target="_blank", href="#{path}/#{version}/mapHelper.js") Latest Build
					|  (.js)
				li
					a(href="#changelog") Changelog

			:markdown

				### Dependencies

				- [jQuery](http://jquery.com)
				- [GoogleMaps API](http://maps.google.com/maps/api/js?sensor=true)
				- [gmaps.js](http://hpneo.github.io/gmaps)

		section#usage

			:markdown

				Quick Start
				===========

				Make sure the following scripts are in your document:

			.fullCode
				pre.syntax.html.
					<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
					<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script>
					<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/gmaps.js/0.3/gmaps.min.js"></script>
					<script type="text/javascript" src="#{path}/#{version}/mapHelper.js"></script>

			p Below is the minimum markup you'll need; basically just a container for the map.

			.fullCode
				pre.syntax.html.
					<div id="map"></div>

			p Finally, initialize it like so:

			.fullCode
				pre.syntax.javascript.

					$(document).ready(function(){
						shiv.init();
					});

			:markdown
				Take note that the actual GMaps object of gmaps.js is initialized through the helper. However, the `map` variable is reserved and assigned to the main map object when initialized. This means you can still access the main `GMaps` object normally through `map` (i.e. `map.hideInfoWindows()` & `shiv.proxy.hideInfoWindows()` & `shiv.hidePopups()` to the same thing)

				Again, this is _minimal_ code to get things working. Be sure to check out all the other "features" by playing with it in the [sandbox](http://jsfiddle.net/nargalzius/B2Hdt)


		section#api

			h1 API

			ul
				li 
					strong
						code.property center 
					code.property : string = 
					em 
						code.property '40.72423,-73.999186'

					p A comma-delimited <code>lat</code>/<code>lng</code> string for the map origin point. This allows for faster <code>lat</code>/<code>lng</code> input instead of creating an object with two separate values.

				li 
					strong
						code.property container 
					code.property : string = 
					em 
						code.property '#map'

					p DOM element <code>id</code> where the map will be plugged into.

				li 
					strong
						code.property zoom 
					code.property : number = 
					em 
						code.property 13

					p Default zoom setting of the map.

				li 
					strong
						code.property icon 
					code.property : string = 
					em 
						code.property null

					p Custom <strong>global</strong> marker icon.

				li 
					strong
						code.property iwID 
					code.property : string = 
					em 
						code.property 'infoWindow'

					p Designated infoWindow class. This is injected into the infoWindow's <code>content</code> to allow easy styling of the elements within. 

					p Take note that while it's designated as an <strong>id</strong>, it's actually injected as a <strong>class</strong>. So be sure to access it through <code>.infoWindow</code>.

				li 
					strong
						code.property w 
					code.property : number = 
					em 
						code.property null
						| ,
					br 

					strong
						code.property h 
					code.property : number = 
					em 
						code.property null
					br 

					p Map canvas dimensions. It's recommended to set this via CSS, but if you're too lazy and just want to see something appear immediately, you can set it here. It's also worth remembering that setting this will <strong>bypass</strong> any value set via CSS

				li 
					strong
						code.property markers 
					code.property : array = 
					em 
						code.property null

					p An array of marker objects. The base implementation can recognize the following object keys:

					p A complete marker object is as follows: <em>{ <strong>loc</strong>: string, <strong>icon</strong>: string, <strong>info</strong>: { <strong>pic</strong>: string, <strong>header</strong>: string, <strong>details</strong>: text } }</em>

					ul
						li 
							strong
								code.property loc 
							code.property : string

							p Comma-delimited <code>lat</code>/<code>lng</code> coordinates (e.g. <code>40.72423,-73.999186</code>) just like with the <code>center</code> variable

						li 
							strong
								code.property icon 
							code.property : string

							p Marker icon for the specific marker. In the event you have the <em>global</em> <code>icon</code> set, any marker with individual <code>icon</code> variables set will override the global icon. Any marker that doesn't, will use the global icon.  

							p The same goes for not having a global icon set; any marker without an individual icon set will default to GoogleMaps' generic marker icon.

						li 
							strong
								code.property info 
							code.property : string
							| or 
							code object

							p If set, this automatically will generate an infoWindow, depending on the datatype.  

							p If it's a string, it simply displays the text on the infowindow (still could be styled through <code>.infoWindow .info</code> class). If it's an object, it'll accept one, two, or all three of the keys: <code>pic</code> for an image, <code>header</code> for a title, and <code>details</code> for the blurb.  

							p While the class automatically generates the divs and assigns the classes for each of these elements, it <strong>does not</strong> style them - so the user is still required to style the <code>.infoWindow</code> class and all its contents through CSS

				li 
					strong
						code.property template 
					code.property : function = 
					em 
						code.property null

					p This is the most powerful feature for customizing markers. You can have something like:

					.quickCode
						pre.syntax.javascript.

							var markerArray = [
								{ loc: '40.730994,-74.003134', info: { url: 'http://google.com', name: 'Google Inc.' } },
								{ loc: '40.717595,-74.001417', info: { url: 'http://microsoft.com', name: 'Microsoft'} }
							];

							$(document).ready(function(){
								shiv.init({
									markers: markerArray,
									template: customTemplate
								});
							});

							function customTemplate(num) {
								// PLACEHOLDER OBJECT
								var tempStr = $('<div>');

								// DYNAMICALLY POPULATE PLACEHOLDER
								$('<div>')
									.append($('<a>').attr({
										'href': markerArray[num].info.url,
										'target': '_blank'
									}).text(markerArray[num].info.name))
									.appendTo(tempStr);
								$('<div>').text('lat: '+markerArray[num].loc.split(',')[0]).appendTo(tempStr);
								$('<div>').text('lng: '+markerArray[num].loc.split(',')[1]).appendTo(tempStr);

								// CONVERT TO HTML STRING AND PASS BACK AS OBJECT TO gmaps.js
								return { content: generateIWC(tempStr) };
							}

					p What happens is that if the class detects a <code>template</code> function, it will <strong>ignore</strong> the contents of the <code>info</code> key as basis of automatic marker generation and will instead generate the infoWindow <code>content</code> values based on the callback. 

					p Since it's no longer relaint on any particular value in the object, you can construct the callback function to generate pretty much anything. The only limitation is that it's <em>ultimately</em> going to be injected in Googlemaps' standard infoWindow.

					p The number will serve as an index of the selected object from the marker array - meaning the function runs for every item on the list - and you can reference <strong>any</strong> value of that particular object. 

					p Yes, that means you're not limited by the contents of the <code>info</code> object. As demonstrated by the code above, you have now put arbitrary keys (e.g. <code>url</code>, <code>name</code>) in the <code>info</code> object instead of the usual <code>pic</code>, <code>header</code>, & <code>details</code>. In addition to that, we've also used values <em>outside</em> of it (e.g. <code>loc</code>)

		section#changelog

			:markdown
				Changelog
				=========

				## [1.0](#{path}/1.0/mapHelper.js)

					- Initial release

		script.
			$(document).ready(function() {
				$('.syntax').each(function(i, e) {hljs.highlightBlock(e)});
			});