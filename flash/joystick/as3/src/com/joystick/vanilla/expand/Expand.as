package com.joystick.vanilla.expand {		import flash.net.URLRequest;	import flash.display.*;	import flash.external.ExternalInterface;	import flash.utils.Timer;	import flash.events.*;	import flash.geom.Point;		import com.greensock.*;	import com.greensock.easing.*;		public class Expand extends MovieClip {				private var eMask:Sprite = new Sprite();		private var cMask:Sprite = new Sprite();				private var colMC:MovieClip = new MovieClip();		private var expMC:MovieClip = new MovieClip();		private var eLoader:Loader;		private var cLoader:Loader = new Loader();				private var collapsedY:Number = 0;		private var collapsedX:Number = 0;				public var minW:Number;		public var minH:Number;		public var maxW:Number;		public var maxH:Number;		// USER CONFIGURABLE VARIABLES				public var _DIRECTION = "DOWN";		public var _COLLAPSED:String = "collapsed.swf";		public var _EXPANDED:String = "expanded.swf";		public var _DURATION:Number = 1;		public var _MOUSECOLLAPSE:Boolean = false;		public var _AUTOEXPAND:Boolean = false;		public var _AUTOCOLLAPSE:Number = 0;		public var _PUSHDOWN:Boolean = false;		public var _ACCOI:Boolean = true;		public var _BORDER:Number = 0x000000;		public var acTimer:Timer;		public var isExpanded:Boolean = false;		public var debug:Boolean = false;				public function init():void		{			loadContents();		}		private function loadContents(e:* = null):void		{	// POLITE LOADER			initExpand();						cLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, cComplete);			cLoader.load(new URLRequest(_COLLAPSED));									if(_AUTOEXPAND)			{				colMC.visible = false;								loadExpanded();			}		}				private function initExpand(e:Event = null):void		{						maxW = stage.stageWidth;			maxH = stage.stageHeight;						// DRAW EXPANDED MASK			eMask.graphics.beginFill(0x999999);			eMask.graphics.drawRect(0, 0, maxW, maxH);			eMask.graphics.endFill();						eMask.x = 0;			eMask.y = 0;						if(minW && minH)			{				expanding.width = minW;				expanding.height = minH;			}			else			{				minW = expanding.width;				minH = expanding.height;			}						createCollapseMask(minW, minH);						// LAYOUT			switch(_DIRECTION)			{				case "U":					eMask.y = collapsedY = maxH;				break;				case "L":					eMask.x = collapsedX = maxW;				break;				case "R":					eMask.x = collapsedX = maxW*-1;				break;				case "RU":					eMask.x = collapsedX = maxW*-1; 					eMask.y = collapsedY = maxH;				break;				case "RD":					eMask.x = collapsedX = maxW*-1;					eMask.y = collapsedY = maxH*-1;				break;				case "LU":					eMask.x = collapsedX = maxW;					eMask.y = collapsedY = maxH;				break;				case "LD":					eMask.x = collapsedX = maxW;					eMask.y = collapsedY = maxH*-1;				break;				case "O":					eMask.x = collapsedX = expanding.x + Math.floor(expanding.width/2);					eMask.y = collapsedY = expanding.y + Math.floor(expanding.height/2);					eMask.scaleX = eMask.scaleY = 0;				break;				default:					eMask.y = collapsedY = maxH*-1;			}						cMask.x = colMC.x = expanding.x;			cMask.y = colMC.y = expanding.y;						addChild(colMC);			addChild(cMask);			addChild(expMC);			addChild(eMask);						colMC.mask = cMask;			expMC.mask = eMask;						if(debug)			{				trace("Expand direction: "+_DIRECTION);				trace("collapsed width: "+minW);				trace("collapsed height: "+minH);				trace("expanded width: "+maxW);				trace("expanded height: "+maxH);			}		}				private function createCollapseMask(w:Number, h:Number):void		{			cMask.graphics.beginFill(0x999999);			cMask.graphics.drawRect(0, 0, w, h);			cMask.graphics.endFill();		}		private function query(e:Event):void		{			e.currentTarget.dispatchEvent(new Event("WE_ARE_LIVE"));		}		private function cComplete(e:Event):void		{			trace("collapsed done");			cLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, cComplete);			cLoader.addEventListener("AD_EXPAND", loadExpanded);			cLoader.addEventListener("ARE_WE_LIVE", query);			colMC.addChild(cLoader);			createBorder(colMC, minW, minH);		}		private function loadExpanded(e:* = null):void		{	// LOADS EXPANDED SWF (BUT DOESN'T NECESSARILY TRIGGER EXPAND)					eLoader = new Loader();			var req:URLRequest = new URLRequest(_EXPANDED);						if(debug)			{				trace(eLoader.contentLoaderInfo);				trace("loading: "+_EXPANDED);			}						eLoader.load(req);			eLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, eComplete);			eLoader.addEventListener("ARE_WE_LIVE", query);		}						private function eComplete(e:Event):void		{			eLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, eComplete);			expMC.addChild(eLoader);			createBorder(expMC, maxW, maxH);			if(_AUTOEXPAND)				showExpanded();			else			{				cLoader.addEventListener("START_EXPAND", showExpanded);				cLoader.dispatchEvent(new Event("META_EXPANDREADY"));			}		}		private function showExpanded(e:* = null):void		{			cLoader.removeEventListener("START_EXPAND", showExpanded);						// TELL colMC EXPANSION HAS STARTED			cLoader.dispatchEvent(new Event("META_EXPANDING"));						eLoader.addEventListener("AD_COLLAPSE", hideExpanded);			eLoader.addEventListener("KILL_AUTOCOLLAPSE", killAutoCollapse);						if(_PUSHDOWN)				TweenLite.to(eMask, _DURATION, {y:0, x:0, ease:Linear.easeNone, onComplete:finishedExpand});			else			{				if(_DIRECTION == "O")					TweenLite.to(eMask, _DURATION, { y:0, x:0, scaleX:1, scaleY:1, delay:.1, ease:Quad.easeInOut, onComplete:finishedExpand});				else					TweenLite.to(eMask, _DURATION, {y:0, x:0, delay:.1, ease:Quad.easeInOut, onComplete:finishedExpand});			}			if(ExternalInterface.available)				ExternalInterface.call("expand");		}				private function finishedExpand():void		{			// TELL BOTH CHILDREN EXPANSION IS DONE			cLoader.dispatchEvent(new Event("META_EXPANDED"));			eLoader.dispatchEvent(new Event("META_EXPANDED"));						if(_AUTOCOLLAPSE > 0)			{				if(debug)					trace("autocollapse in: "+_AUTOCOLLAPSE+" second(s)");				acTimer = new Timer(_AUTOCOLLAPSE*1000);				acTimer.addEventListener(TimerEvent.TIMER, autoCollapseAd);				acTimer.start();				if(_ACCOI)					stage.addEventListener(MouseEvent.MOUSE_MOVE, killAutoCollapse);			}						isExpanded = true;			if(_MOUSECOLLAPSE)				stage.addEventListener(Event.MOUSE_LEAVE, requestCollapse);		}		private function requestCollapse(e:* = null)		{			if(isExpanded)			{				if(_MOUSECOLLAPSE)					stage.removeEventListener(Event.MOUSE_LEAVE, requestCollapse);				eLoader.dispatchEvent(new Event("REQUEST_COLLAPSE"));			}		}		private function hideExpanded(e:* = null):void		{	// COLLAPSE ANIMATION						// TELL BOTH CHILDREN THAT COLLAPSE HAS STARTED			cLoader.dispatchEvent(new Event("META_COLLAPSING"));			eLoader.dispatchEvent(new Event("META_COLLAPSING"));			killAutoCollapse();			isExpanded = false;						eLoader.removeEventListener("AD_COLLAPSE", hideExpanded);						if(_MOUSECOLLAPSE)				stage.removeEventListener(Event.MOUSE_LEAVE, requestCollapse);						if(_AUTOEXPAND)				colMC.visible = true;					if(_PUSHDOWN)			{				TweenLite.to(eMask, _DURATION, {y:collapsedY, x:collapsedX, ease:Linear.easeNone, onComplete:unloadAd});								if(ExternalInterface.available)					ExternalInterface.call("collapse");								//expanding.collapse();			}			else			{				if(_DIRECTION == "O")					TweenLite.to(eMask, _DURATION, { x: collapsedX, y: collapsedY, scaleX:0, scaleY:0, ease:Quad.easeInOut, onComplete:unloadAd });				else					TweenLite.to(eMask, _DURATION, {y:collapsedY, x:collapsedX, ease:Quad.easeInOut, onComplete:unloadAd});			}					}		private function unloadAd():void		{	// UNLOADS EXPANDED SWF			expMC.removeChild(eLoader);			eLoader = null;						if(debug)				trace("expanded SWF unloaded");						// TELL colMC THAT COLLAPSE IS DONE			cLoader.dispatchEvent(new Event("META_COLLAPSED"));		}				private function autoCollapseAd(e:TimerEvent):void		{			killAutoCollapse();			hideExpanded();		}				private function killAutoCollapse(e:* = null):void		{			if(_AUTOCOLLAPSE > 0)			{				acTimer.removeEventListener(TimerEvent.TIMER, autoCollapseAd);				acTimer.stop();				eLoader.removeEventListener("KILL_AUTOCOLLAPSE", killAutoCollapse);								if(_ACCOI)					stage.removeEventListener(MouseEvent.MOUSE_MOVE, killAutoCollapse);				if(debug)					trace("killing autocollapse stuff");			}						_AUTOCOLLAPSE = 0;			_ACCOI = false;		}				private function exitHandler(e:Event):void		{			if(isExpanded)				requestCollapse();		}		private function createBorder(mc:MovieClip, w:Number, h:Number):void		{			if(isFinite(_BORDER))			{				var t:Sprite = new Sprite();				var b:Sprite = new Sprite();				var l:Sprite = new Sprite();				var r:Sprite = new Sprite();					t.mouseEnabled = 				b.mouseEnabled = 				l.mouseEnabled = 				r.mouseEnabled = false;					// DRAW TOP				t.graphics.beginFill(_BORDER);				t.graphics.drawRect(0, 0, w, 1);				t.graphics.endFill();					// DRAW LEFT				l.graphics.beginFill(_BORDER);				l.graphics.drawRect(0, 0, 1, h);				l.graphics.endFill();					// DRAW BOTTOM				b.graphics.beginFill(_BORDER);				b.graphics.drawRect(0, h-1, w, 1);				b.graphics.endFill();					// DRAW RIGHT				r.graphics.beginFill(_BORDER);				r.graphics.drawRect(w-1, 0, 1, h);				r.graphics.endFill();					mc.addChild(t);				mc.addChild(l);				mc.addChild(b);				mc.addChild(r);			}		}	}}