package com.joystick.studio.video {	import com.google.ads.studio.innovation.youtube.player.YTPlayerEvent;	import com.google.ads.studio.innovation.youtube.player.proxy.YTPlayer;	import com.google.ads.studio.ProxyEnabler;	import flash.display.Stage;	import flash.display.Sprite;	import flash.events.Event;	import flash.system.Security;	public class YouTube extends Sprite {		public var enabler:ProxyEnabler;		public var listener:Function = function():void{}		public var track:Boolean = true;		public var video:YTPlayer;		public var container:Sprite;		public var w:Number = 400;		public var h:Number = 225;		// COMMON		public var videoId:String = "IrZmf7q8SN4";		public var autoPlayType:String = "standard"; // none/preview/standard/nonInteractiveIntro		public var controlsType:String = "autohide"; // none/autohide/standard		public var clickForSoundText:String = "REPLAY WITH SOUND"; // SET BLANK TO HIDE		public var previewDuration:Number = 10;		public var showInfo:Boolean = false;		public var allowFullscreen:Boolean = true;		// OTHERS		public var color:String = "red";		public var theme:String = "dark";		public var suggestedQuality:String = "medium"; // low/medium/high		public var hdOnFullscreen:Boolean = true;		public var previewStartTime:Number = 5;		public var showAnnotations:Boolean = false;		public var showCaptions:Boolean = false;		public var videoIsLive:Boolean = false;		public var debug = true;		public function YouTube() {			Security.allowDomain("*");			Security.allowDomain("www.gstatic.com");			Security.allowDomain("www.youtube.com");			Security.allowDomain("s.ytimg.com");			Security.allowDomain("motifcdn2.doubleclick.net");			enabler = ProxyEnabler.getInstance();			if(debug)			{				trace("\n\n");            	trace("var vid:YouTube = new YouTube();");            	trace("    this.addChild(vid);");            	trace("    vid.init(id, container); // BOTH OPTIONAL");            	trace("\n");            	trace("AVAILABLE PARAMETERS (http://bit.ly/1eWgm1e)");				trace("videoId");				trace("autoPlayType");				trace("controlsType");				trace("clickForSoundText");				trace("previewDuration");				trace("showInfo");				trace("allowFullscreen");				trace("color");				trace("theme");				trace("suggestedQuality");				trace("hdOnFullscreen");				trace("previewStartTime");				trace("showAnnotations");				trace("showCaptions");				trace("videoIsLive");				trace("\n\n");			}		}		public function init(id:* = null, mc:* = null):void		{			video = new YTPlayer();			if(mc)			{				container = mc;				video.width = container.width;				video.height = container.height;			}			else			{				container = new Sprite();				this.addChild(container);				video.width = w;				video.height = h;			}			video.proxy.allowFullscreen	 = allowFullscreen;			video.proxy.autoPlayType 	 = autoPlayType;			video.proxy.clickForSoundText= clickForSoundText;			video.proxy.previewDuration  = previewDuration;			video.proxy.controlsType 	 = controlsType;			video.proxy.showInfo 		 = showInfo;			video.proxy.hdOnFullscreen 	 = hdOnFullscreen;			video.proxy.previewStartTime = previewStartTime;			video.proxy.showAnnotations  = showAnnotations;			video.proxy.showCaptions 	 = showCaptions;			video.proxy.suggestedQuality = suggestedQuality;			video.proxy.theme 			 = theme;			video.proxy.videoIsLive 	 = videoIsLive;			if(id)				video.proxy.videoId = id;			else				video.proxy.videoId = videoId;					for each (var playerEvent:String in YTPlayerEvent.allEvents)			{				video.addEventListener(playerEvent, eventHandler);				video.addEventListener(playerEvent, listener);			}					container.addChild(video);		}				// TRACKING		private function eventHandler(event:YTPlayerEvent):void {			// DISPATCH FOR PARENT EVENTLISTENER			this.dispatchEvent( event );			switch (event.type) {				case YTPlayerEvent.PLAYER_READY :					this.dispatchEvent( new Event("LOADED") );				break;				case YTPlayerEvent.VIDEO_PLAY:					if(track) enabler.counter("YTVideo Click to Play");					this.dispatchEvent( new Event("PLAYING") );				break;				case YTPlayerEvent.VIDEO_COMPLETE:					this.dispatchEvent( new Event("FINISHED") );				break;				case YTPlayerEvent.VIDEO_0_PERCENT:					if(track) enabler.counter("YTVideo Percent 0");				break;				case YTPlayerEvent.VIDEO_25_PERCENT:					if(track) enabler.counter("YTVideo Percent 25");				break;				case YTPlayerEvent.VIDEO_50_PERCENT:					if(track) enabler.counter("YTVideo Percent 50");				break;				case YTPlayerEvent.VIDEO_75_PERCENT:					if(track) enabler.counter("YTVideo Percent 75");				break;				case YTPlayerEvent.VIDEO_100_PERCENT:					if(track) enabler.counter("YTVideo Percent 100");				break;				case YTPlayerEvent.AUTOPLAY_VIDEO_0_PERCENT:					if(track) enabler.counter("YTVideo Autoplay Percent 0");				break;				case YTPlayerEvent.AUTOPLAY_VIDEO_25_PERCENT:					if(track) enabler.counter("YTVideo Autoplay Percent 25");				break;				case YTPlayerEvent.AUTOPLAY_VIDEO_50_PERCENT:					if(track) enabler.counter("YTVideo Autoplay Percent 50");				break;				case YTPlayerEvent.AUTOPLAY_VIDEO_75_PERCENT:					if(track) enabler.counter("YTVideo Autoplay Percent 75");				break;				case YTPlayerEvent.AUTOPLAY_VIDEO_100_PERCENT:					if(track) enabler.counter("YTVideo Autoplay Percent 100");				break;				case YTPlayerEvent.VIDEO_PAUSE:					if(track) enabler.counter("YTVideo Pause");					this.dispatchEvent( new Event("PAUSE") );				break;				case YTPlayerEvent.VIDEO_REPLAY:					if(track) enabler.counter("YTVideo Replay");					video.proxy.unMute();					this.dispatchEvent( new Event("REPLAY") );				break;				case YTPlayerEvent.VIDEO_MUTE:					if(track) enabler.counter("YTVideo Mute");					this.dispatchEvent( new Event("MUTE") );				break;				case YTPlayerEvent.VIDEO_UNMUTE:					if(track) enabler.counter("YTVideo Unmute");					this.dispatchEvent( new Event("UNMUTE") );				break;				case YTPlayerEvent.VIDEO_FULLSCREEN:					if(track) enabler.counter("YTVideo Fullscreen Entered");				break;				case YTPlayerEvent.VIDEO_EXIT_FULLSCREEN:				break;				case YTPlayerEvent.VIDEO_QUALITY_CHANGE:					if(track) enabler.counter("YTVideo Quality Change");				break;				case YTPlayerEvent.VIDEO_EXIT:					if(track) enabler.counter("YTVideo Exit");					video.proxy.pause();				break;			}		}		public function destroy(e:* = null)		{			video.destroy();		}		public function play(e:* = null) {			video.proxy.play();		}				public function pause(e:* = null) {			video.proxy.pause();		}				public function mute(e:* = null) {			video.proxy.mute();		}				public function unmute(e:* = null) {			video.proxy.unMute();		}				public function replay(e:* = null) {			video.proxy.replay();		}	}}