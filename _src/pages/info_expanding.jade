!!!5
html
	head
		title Joystick Expandable Class
		link(rel="stylesheet", type="text/css", href="../../../f/c/readme.css")

		script(src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js")
		script(src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.3/highlight.min.js")

	body
		
		header#info

			img#logo(src="../../../img/joystick/logo.png")

			:markdown
				Joystick Expanding HTML Class
				-----------------------------

				This is an HTML version of a basic Flash Expandable. Unlike with the [Expanding Lightbox](http://nargalzius.github.io/ajax/joystick/expanding_lightbox), _both_ collapsed _and_ expanded contents are present. And there is no "delay" before expanding.

				The main container's positioning relative to the page is based on its _expanded_ dimensions (`maxW`, `maxH`, which you can set). The collapsed position is automatically calculated relative to the expanded dimensions and the direction you choose it to expand. This eliminates the need for any guesswork (all you have to worry about is how to position the unit relative to the main page)

				### Resources

				- [Getting Started](#usage)
				- [Sandbox](http://cdpn.io/KLaDz) (codepen)
				- [Full Documentation](#api)
				- [Latest Build](http://nargalzius.github.io/ajax/joystick/expanding/latest/expandObj.js) (.js)
				- [Sample File](http://nargalzius.github.io/downloads/expanding/latest.zip) (.zip)
				- [Changelog](#changelog)

				### Dependencies

				- [jQuery](http://jquery.com) 
				- [GreenSock Animation Platform](http://www.greensock.com/gsap-js)

		section#usage

			h2 Quick Start

			p Include the following scripts in your document's <code>&lt;head></code>

			pre.syntax.
				<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
				<script src="http://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js"></script>
				<script src="http://nargalzius.github.io/ajax/joystick/expanding/latest/expandObj.js"></script>

			p Here is the minimum markup you'll need. The <code>.sans</code> class is optional (the script automatically applies sans-serif fonts to the class)

			pre.syntax.
				<div id="unit" class="sans">
					<div id="content">
						<div id="collapsed" class="unit_component">
							<div class="background"></div>
							<!-- MORE COLLAPSED STUFF HERE -->
							<button id="exp_btn" class="btn"></button>
							<div id="cta" class="btn">ROLLOVER TO EXPAND</div>
						</div>
						<div id="expanded" class="unit_component">
							<div class="background"></div>
							<!-- MORE EXPANDED STUFF HERE -->
							<div id="close" class="btn">CLOSE X</div>
						</div>
					</div>
				</div>

			p Finally, initialize it like so:

			pre.syntax.
				<script>
					$(document).ready(function(){
						expanding.init();
					});
				</script>

			:markdown
				Again, this is _minimal_ code to get things working. Be sure to check out all the other "features" by playing with it in the [sandbox](http://codepen.io/nargalzius/pen/KLaDz)

		section#api
			:markdown
				API
				---

				
				- **`minW`**`:number =` *`300`,*  
				**`minH`**`:number =` *`250`,*  
				**`maxW`**`:number =` *`500`,*  
				**`maxH`**`:number =` *`250`*

					The collapsed/expanded width/height. All [main] elements/animations (i.e. expanding bar & animation, etc.) are automatically positioned based on these values.

				- **`direction`**`:string =` *`LEFT`*

					The direction of the expand. Accepts `LEFT`, `RIGHT`, `UP`, `DOWN` and is **case sensitive**

				- **`preload`**`:array =` *`null`*

					Accepts a series of image urls. If present/set The unit will delay displaying itself until all the images have been loaded to the cache. This in effect will ensure that everything is ready (for animations, etc.) by the time the user sees it.

					The `['SURE_FAIL']` example is to demonstrate how the unit falls back to simply displaying the collapsed state and disabling the expand functionality. If `exit` has been set, then it clicks through to the set url in place of the expand.

				- **`rollover`**`:boolean =` *`true`*

					Sets the _type_ of expand trigger. Set to `false` if you wish for _click-to-expand_ functionality

					An expansion triggered by a click will bypass the expanding bar animation and immediately call the lightbox.

				- **`mouseout`**`:boolean =` *`false`*

					If set to `true`, an expanded unit will automatically collapse when the cursor leaves the unit.

				- **`delay`**`:number =` *`.5`*

					Speed/duration of the expand animation.

				- **`trigger`**`:DOM element =` *`$('#exp_btn')`*

					Sets the expand trigger. By default, the entire collapsed unit is the trigger. But if you set it to a DOM element, only interaction with that element will trigger the expland.

					If `exit` is set, the trigger will do the expand action while the background will clicktrhough. If it's not, then **clicking** on the background will trigger a manual expand.

				- **`exit`**`:string =` _`null`_

					Intended for a URL string. If set, then the collapsed background (assuming `trigger` is set) and expanded background will be set to click-though to the exit URL.

				- **`intro`**`:function =` _`null`_

					Allows you to set a custom intro function. By default, when the unit is ready to be shown, it simply fades-in the collapsed state. When `intro` is set, it instead immediately sets the opacity of the collapsed container to visible - and relies on your custom animation code for "flair."

					Triggers (click and/or rollover) for expansion will only work when the `isReady` variable is set to true. Normally, this is set automatically (e.g. after preloading or a straight-up `init()` without special parameters.

					Enabling the custom intro disables this process. And the user is required to manually set the `isReady` after the [custom] animation is done. This can be achieved by either setting the variable directly (`expanding.isReady = true`) or calling the `expanding.ready()` function.

					If the `exit` variable is set, clicking on the ad during the intro will result in a clickthrough action. This will then revert to the normal expansion action once the `isReady` is finally set to *`true.`*

				- **`expand`**`:function =` _`null`_

					Similar to `intro`, this allows you to run custom actions on expand should you need to.

				- **`collapse`**`:function =` _`null`_

					Similar to `intro`, this allows you to run custom actions on collapse should you need to.

		section#changelog

			:markdown
				Changelog
				---------

				# [1.3](http://nargalzius.github.io/ajax/joystick/expanding/1.3/expandObj.js)

					- Converted spinner to pure JS (using [spin.js](http://fgnass.github.io/spin.js))
					- Changed `min_height`, `min_width`, `max_height`, `max_width` to `minW`, `minH`, `maxW`, `maxH` 

				# [1.2](http://nargalzius.github.io/ajax/joystick/expanding/1.2/expandObj.js)

					- Changed default collapsed dimensions to 300x250
					- Changed default expanded dimensions to 500x250
					- Changed default expand direction to LEFT
					- Renamed `userExpand` to `expand`
					- Renamed `userCollapse` to `collapse`
					- Removed need for external css for core functionality
					- Various fallbacks depending on unit state (and errors)
					- Added dedicated expanding button reference (#exp_btn)
				
				# [1.1](http://nargalzius.github.io/ajax/joystick/expanding/1.1/expandObj.js)

					- Converted to `expanding` object/class
					- Intergrated preloader function (preload)
					- Changed default animation delay to 500 milliseconds
					- Added `intro` method for custom intro actions
					- Added `userExpand` method for custom expand actions
					- Added `userCollapse` method for custom collapse actions

				# 1.0

					- Initial release

		script.
			$(document).ready(function() {
				$('#usage pre').each(function(i, e) {hljs.highlightBlock(e)});
			});