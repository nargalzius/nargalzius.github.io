version = '1.2'
path = 'http://nargalzius.github.io/ajax/joystick/preview'
title = 'Joystick Automatic Preview'

!!!5
html
	head
		meta(http-equiv="Content-Type", content="text/html; charset=utf-8")
		title #{title}
		link(rel="stylesheet", type="text/css", href="../../../f/c/readme.css")

		script(src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js")
		script(src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.3/highlight.min.js")

	body
		
		header#info

			img#logo(src="../../../img/joystick/logo.png", alt="Joystick Interactive")

			h1 #{title}

			:markdown

				One of the most common things we do as Joystick employees is to create "preview" pages. This can be painfully repetitive. Of course, this is only limited to the "quick and dirty" previews we all know and... err... love ;) 

				As such, I've decided to create a multi-purpose template that can reliably and neatly generate these pages. I'm sure those of us who have been using the same old template (which looking at the code, I believe is the one I myself made from the beginning of time) are familiar with the tediousness of configuring them for different files. The goal of this script was to standardize image/flash embedding while minimizing CSS (which you can still do if you wish) and putting all relative scripts (swfObject, etc.) in the cloud.

				The result is you can just save the code as a snippet, then whenever you need an index.html, you simply create it and paste the code in - no need for extra js files, no need for adjusting CSS (unless absolutely necessary), and most importantly, you only focus on ONE area on the code to generate the entire thing.				

			h3 Resources

			ul
				li
					a(href="#usage") Getting Started
				li
					a(target="_blank", href="http://jsfiddle.net/nargalzius/K3QTx") Sandbox
					|  (jsfiddle)
				li
					a(href="#api") Full Documentation
				li
					a(target="_blank", href="#{path}/#{version}/preview.js") Latest Build
					|  (.js)
				li
					a(href="#changelog") Changelog

			:markdown
				### Dependencies

				- [jQuery](http://jquery.com)
				- [GreenSock Animation Platform](http://www.greensock.com/gsap-js)

		section#usage

			:markdown

				Quick Start
				===========

				Because of the nature of this particular script, the whole blob of code below is needed for it to work properly - so that at the very least it can fallback to displaying a message with a link to the documentation.

				The parts that aren't meant to be touched have been minified, only exposing the user-configurable stuff. Every file referenced in the page is pulled from a CDN, so even at it's very basic form, uncommenting everything (except for the image array comment - as it's just meant to be a reference) will actually work out of the box.

			.fullCode
				pre.syntax.javascript.
					<!DOCTYPE html><html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><link rel="stylesheet" type="text/css" href="http://nargalzius.github.io/ajax/joystick/preview/1.2/preview.css"/><style>

					/* CUSTOM STYLES HERE */

					</style></head><body><header><a id="logo" href="http://joystickinteractive.com" title="Joystick Interactive" target="_blank"></a><h1 id="header">Joystick Interactive</h1><div id="byline"> <p>Documentation of this automated preview template can be found <a href="http://nargalzius.github.io/ajax/joystick/preview">here.</a></p></div><div id="preloader"><div id="preloadText"></div><div id="preloadIcon"></div></div></header><div id="container"><div id="flashcontent" class="flashalign"><div id="unit"></div></div><div id="pushdown"></div></div><script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script><script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/swfobject/2.2/swfobject.js"></script><script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js"></script><script type="text/javascript" src="http://nargalzius.github.io/ajax/joystick/preview/1.2/preview.js"></script><script type="text/javascript">

					debug = false;

					/* IMAGE SETTINGS */
					var i = [];
						//i.push({src: null, title: null, desc: null, group: null});

					/* FLASH SETTINGS */
					var f = {
						src: 'http://nargalzius.github.io/f/s/970x66_exp.swf',
						w: 970, 
						h: 400,
						x: 1,
						y: 133,
						minH: 66,
						//page: 'http://nargalzius.github.io/img/joystick/background.png',
						//pushdown: 'http://nargalzius.github.io/img/joystick/pd_fg.png'
					};

					/* INITIALIZE PREVIEW */
					$(document).ready(function(){
						preview.init({ 
							//img: i,
							//swf: f,
							//title: 'Title',
							//desc: 'Description',
							//backgroundColor: '#000',
							//color: '#ccc',
							//theme: 'dark'
						});
					});

					</script></body></html>

			:markdown

				In a nutshell, the script waits for either of two things: an array of image objects (`img`), or a flash file (`swf`) object.

				If you want to create a preview of an image (or series of images) you simply popuplate the image array. Doesn't matter how many images you put in there, it'll generate them all, and it'll center them all. And if you wish to group some images together, you can do that too (discussed [below](#api))

				If you want to embed a flash file, you just input all relevant data; source, width, height, etc. and it'll likewise embed, and center the unit without you having to adjust anything in the CSS.

				The flash functionality does more than that, but it'd be redundant to mention them here, so I'll save it for the [API](#api) section. 

				Sufficed to say, trying it out on the [sandbox](http://jsfiddle.net/nargalzius/K3QTx) will give you an idea of how to use it - and hopefully it'll be as useful to you as it is to me.

		section#api
			
			h1 API

			ul

				li
					strong
						code.property img
					code.property : array
					
					:markdown
						The image array that contains each image as objects. The keys available are `src`, `title`, `desc`, and `group`, all of which are strings.

					ul
						li 
							:markdown
								`src` is the only required parameter, as it is the url of your image

						li 
							:markdown
								`title` Optional. This is similar to the main document `title`, it puts header text on top of each image.

						li 
							:markdown
								`desc` Optional. This is similar to the main document `desc`, but it puts the subtext **below** the image

						li 
							:markdown
								`group` Optional. An `id` assigned to the wrapper div of a series of images you choose to group.

								The normal way of displaying images is centered and stacked on top of each other. This can be annoying if you have a series of thin vertical images, wherein you would prefer to simply have them display side-by-side. 

								Assigning them to the same `group` id will put them in a container, and set each to the css `display: inline-table` flow. Meaning that if they could be, they will be displayed side-by-side, but if the viewport is too small, they will re-flow accordingly.

				li
					strong
						code.property swf
					code.property : object

					:markdown
						The flash object that contains data needed to initialize the flash embed. The parameters are: `src`, `w`, `h`, `x`, `y`, `page`, `push`, & `minH`

					ul
						li
							:markdown
								`src`:  the source flash file.
						li
							:markdown
								`w`: flash file width
						li
							:markdown
								`h`: flash file height
						li
							:markdown
								`page`: Optional. Normally, the flash unit is automatically centered. But if you want to create a "mockup" page, you can create a background image of the site you want to plug the unit into and put it here.

							:markdown
								if this is set, it'll automatically clear the entire container (logo, text, etc.) and instead "convert" it to a container with a background image. Your unit will now be set to absolute 0 0 in relation to the container, which you can now adjust the unit's offset through the next parameters.
						li
							:markdown
								`x`: & `y`: Optional. Top and left offset of the unit. Usually used in conjucntion with page so you can place the unit in a spsc
						li
							:markdown
								`push`: Optional. This is just a bonus, if you want "pushdown" functionality. You just put here an image of the section of the mock site you want to push down. Take note that if you use this option, you'll have to add an `ExternalInterface` in your flash the functions to call are `expand()` and `collapse()` (duh!)
						li
							:markdown
								`minH` Optional. "collapsed" height. This variable is only used when you have `push` set/enabled. 

								You **have** to set this or the elements to be expanded are most likely to be loaded below the full expanded height of your unit. 

								Since a pushdown is really just a vertical oriented expand, all the calculations are done in the background. What it does is it takes the dimension/position of your unit, and calculates that against the minimized height to decide the Y values it needs for the expand/collapse animations

				li
					strong
						code.property title
					code.property : string

					:markdown
						Optional. Requires `swf` or `img` to work. This enters a centered title-header below the logo. If this is set, it will **also** change the browser title bar.

				li
					strong
						code.property desc
					code.property : string

					:markdown
						Optional. Requires `swf` or `img` to work. A sub header below the title. Note that the `title` and the `desc` are independent of each other - so you may use either one, both, or none.

				li
					strong
						code.property backgroundColor
					code.property : string = 
					em
						code.property '#FFF'

					:markdown
						Optional. Requires `swf` or `img` to work. Accepts valid CSS color property value string.

						Changes the entire document's background color - for previews that require a dark background.

						

				li
					strong
						code.property theme
					code.property : string = 
					em
						code.property 'light'

					:markdown
						Optional, case-sensitive. Requires `swf` or `img` to work. Accepts either of two values: `light` or `dark` 

						Switches the [alphatransparent] PNG logo to suit the background better.

				li
					strong
						code.property color
					code.property : string = 
					em
						code.property '#222'

					:markdown
						Optional. Requires `swf` or `img` to work. Accepts valid CSS color property value string.

						Changes the document's default text color - for previews that require a dark background.

			:markdown

				#### Notes

				As of the moment, for some reason it breaks when you try to load an swf from a folder. It works fine when loading from the same directory level or from a url.

				Also, the pushdown is far from bullet-proof, it works for the most part, but it also largely depends on how the browser handles `ExternalInterface` calls. It was just created as a bonus.

		section#changelog

			:markdown
				Changelog
				=========
				## [1.2](#{path}/1.2/preview.js)

					- Added `theme` variable to switch from two png backgrounds depending on the background.

				## [1.1](#{path}/1.1/preview.js)

					- Renamed `minY` to `minH`

					- Renamed the flash object key from `flash` to `swf`.

					- Added more error handling

					- Moved the `page` (background image) and `push` (pusdhown image) settings inside the `swf` object. The reason being it's more often that a "mockup" scenario is needed only for flash-based demos.

				## [1.0](#{path}/1.0/preview.js)

					- Initial release

		script.
			$(document).ready(function() {
				$('pre.syntax').each(function(i, e) {hljs.highlightBlock(e)});
			});