version = '1.2'

!!!5
html
	head
		meta(http-equiv="Content-Type", content="text/html; charset=utf-8")
		title Joystick Generic DOM Loader
		link(rel="stylesheet", type="text/css", href="../../../f/c/readme.css")

		script(src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js")
		script(src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/7.3/highlight.min.js")

	body
		
		header#info

			img#logo(src="../../../img/joystick/logo.png", alt="Joystick Interactive")

			:markdown

				Joystick Generic DOM Loader
				===========================

				By nature, HTML data is ready before the "heavier" resources (e.g. images) are loaded in. This means DOM elements can already be manipulated even if the page as a whole is still not [visually] "complete". 

				This can be a problem when working with animations - as you _can_ very well end up animating something that still hasn't finished loading.

				Just like how the `preload` function works on the [expanding](http://nargalzius.github.io/ajax/joystick/expanding) and [expandable lightbox](http://nargalzius.github.io/ajax/joystick/expanding_lightbox) classes, this class provides an easy way to mimmick a "preloader" commonly used in Flash. You simply pass along **all** the images you intend to use, and it'll immediately hide the main container - show it again only when all images are already cached to the browser.

			h3 Resources

			ul
				li
					a(href="#usage") Getting Started
				li
					a(target="_blank", href="http://cdpn.io/epftA") Sandbox
					|  (codepen)
				li
					a(href="#api") Full Documentation  
				li
					a(target="_blank", href="http://nargalzius.github.io/ajax/joystick/dom_loader/#{version}/domLoader.js") Latest Build
					|  (.js)
				li
					a(href="#changelog") Changelog

			:markdown

				### Dependencies

				- [jQuery](http://jquery.com)
				- [GreenSock Animation Platform](http://www.greensock.com/gsap-js)

		section#usage

			:markdown
				Quick Start
				===========

				Include the following scripts in your document's `<head>`

			.fullCode
				pre.syntax.html.
					<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
					<script src="http://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js"></script>
					<script src="http://nargalzius.github.io/ajax/joystick/dom_loader/#{version}/domLoader.js"></script>

			:markdown

				Here is the minimum markup you'll need. The <code>.sans</code> class is optional (the script automatically applies sans-serif fonts to the class)

			.fullCode
				pre.syntax.html.
					<div id="container" class="sans">
						<div id="content">
							<!-- CONTENT HERE -->
							<div id="placeholder">
								CONTENT
							</div>
						</div>
					</div>

			:markdown

				When using the preloader, it's important to set the `width` and `height` of this container via css. This is to ensure that the dynamic spinner will be centered.

				Finally, initialize it like so:

			.fullCode
				pre.syntax.javascript.
					$(document).ready(function(){
						var images = [IMAGE_ARRAY_CONTENTS]
						dom.init({ preload: images });
					});

			:markdown

				Again, this is _minimal_ code to get things working. Be sure to check out all the other "features" by playing with it in the [sandbox](http://codepen.io/nargalzius/pen/epftA)


		section#api
			
			# API

			ul
				li
					strong
						code.property preload 
					code.property : array = 
					em
						code.property null
	
					:markdown

						Accepts a series of image urls. If present/set The container will delay displaying itself until all the images have been loaded to the cache. This in effect will ensure that everything is ready (for animations, etc.) by the time the user sees it.

				li
					strong
						code.property content 
					code.property : DOM element = 
					em
						code.property $('#content')

					:markdown

						The overall `div` that contians all visible elements. It's important to use/set this value when doing a preload, as it automatically hides the container (i.e. everything) until it's ready to show.

				li
					strong
						code.property intro 
					code.property : function = 
					em
						code.property null

					:markdown

						Allows you to set a custom intro function. By default, when the unit is ready to be shown, it simply fades-in. When `intro` is set, it instead immediately sets the opacity container to visible - and relies on your custom animation code for "flair."

		section#changelog

			:markdown

				Changelog
				=========

				## [1.2](http://nargalzius.github.io/ajax/joystick/dom_loader/1.2/domLoader.js)
					- Converted/integrated spinner to a pure JS generated one (using [spin.js](http://fgnass.github.io/spin.js))
					- Class/object name is now `dom` (formerly `expandChild`)
					- Adjusted TweenLite method to `fromTo` (formerly `to`) to make sure it starts invisible no matter what

				## [1.1](http://nargalzius.github.io/ajax/joystick/dom_loader/1.1/domLoader.js)

					- Renamed from `expandChild.js` to `domLoader.js`

				## [1.0](http://nargalzius.github.io/ajax/joystick/dom_loader/1.0/expandChild.js)

					- Initial release

		script.
			$(document).ready(function() {
				$('pre.syntax').each(function(i, e) {hljs.highlightBlock(e)});
			});